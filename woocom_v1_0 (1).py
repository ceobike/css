# -*- coding: utf-8 -*-
"""woocom-v1.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lk9jBP1JknBADkG3vyKGB0Ul4oZLkS-5

# 安装依赖
"""

# 安装Selenium和undetected_chromedriver
!pip install selenium undetected-chromedriver
!apt-get update
!apt install -y chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin
!apt-get install -y chromium-browser


import os
import logging
import csv
import uuid
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from google.colab import drive

# 配置Chrome选项
options = webdriver.ChromeOptions()
options.add_argument('--headless')  # 无头模式
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--remote-debugging-port=9222')  # 解决在Colab中运行Chrome的问题

"""# 挂载Google Drive"""

# 挂载Google Drive
drive.mount('/content/drive')

"""# 定义函数和变量"""

# 定义函数
def join_list_into_str(lst):
    return ', '.join(lst)

# 存储产品链接的列表
product_urls = []

# 用于存储父产品和子产品的列表
parent_products = []
child_products = []

categories_links = {
    "Cheap Belts": "https://leatherbeltsonline.com/product-category/mens-belts/cheap-belts-mens/",
    "Emo Belt": "https://leatherbeltsonline.com/product-category/mens-belts/emo-belt/",

}

"""# 收集产品链接"""

# 初始化WebDriver
driver = webdriver.Chrome(options=options)

try:
    for category, start_url in categories_links.items():
        pages_to_visit = [start_url]

        while pages_to_visit:
            page_url = pages_to_visit.pop(0)
            driver.get(page_url)

            try:
                accept_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="wt-cli-accept-all-btn"]')))
                driver.execute_script("arguments[0].click();", accept_button)
            except NoSuchElementException:
                pass  # 如果元素不存在，直接跳过点击操作
            except TimeoutException:
                logging.warning("Accept button not found. Proceeding without accepting cookies.")

            # 收集当前页面的产品链接
            product_links = [product.get_attribute('href') for product in driver.find_elements(By.XPATH, '//*[@id="content"]/div/div/div/ul/li/h2/a')]
            product_urls.extend(product_links)

            # 查找是否存在下一页的链接
            try:
                next_page_element = WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH, '//a[@class="next page-numbers"]')))
                next_page_link = next_page_element.get_attribute('href')
                # 如果存在，将这个链接添加到 pages_to_visit 列表中
                pages_to_visit.append(next_page_link)
            except TimeoutException:
                # 如果超时，说明已经没有下一页了，直接跳过
                logging.info("No next page found.")
                continue
except Exception as e:
    logging.error('Unexpected error occurred.', exc_info=True)
finally:
    driver.quit()

print(f"Collected {len(product_urls)} product URLs")

"""# 收集产品信息"""

# 初始化WebDriver
driver = webdriver.Chrome(options=options)
try:
    for category, start_url in categories_links.items():
        # 确保此处的 product_urls 包含的是当前类别的所有产品链接
        # 遍历当前类别下的所有产品链接
        for product_link in product_urls:
            driver.get(product_link)
            product = {}
            try:
                product['name'] = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//h1'))).text
                product['images'] = join_list_into_str([
                    el.get_attribute('href')
                    for el in WebDriverWait(driver, 10).until(
                        EC.presence_of_all_elements_located(
                            (By.XPATH, './/a[contains(@class, "gallery_image_link") and contains(@class, "fresco") and contains(@class, "zoom")]')
                        )
                    )
                ])
                product['categories'] = category
                product['tags'] = join_list_into_str([el.text for el in WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.XPATH, './/span[@class="tagged_as"]/a')))])
                # 获取价格信息，如果出现异常则跳过
                try:
                    product['price'] = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//ins/span[@class="woocommerce-Price-amount amount"]'))).text
                except (NoSuchElementException, TimeoutException) as e:
                    logging.warning(f"Failed to retrieve price for {product_link}: {e}")
                    product['price'] = ''
                product['description'] = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="tab-description"]'))).text.replace("LeatherBeltsOnline.com", "mokaamoni.com")
            except NoSuchElementException as e:
                logging.error(f"Error occurred when fetching product info for {product_link}: {e}")
                continue
        # 获取商品变体信息
        try:
            variant_rows = WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.XPATH, '//form/table[@class="variations"]//tr')))
        except TimeoutException:
            variant_rows = []  # 如果超时，说明没有商品变体
        parent_sku = f"p_{uuid.uuid4().hex[:8]}"
        simple_sku = f"z_{uuid.uuid4().hex[:8]}"
        if len(variant_rows) > 0:  # If product has variants
            product['Type'] = 'variable'
            product['SKU'] = parent_sku
            product['Parent'] = ""
            parent_products.append(product)

            for row in variant_rows:
                attribute_label = row.find_element(By.XPATH, './/th[@class="label"]/label').text
                options = [option.text for option in row.find_elements(By.XPATH, './/select/option[contains(@class, "attached") and contains(@class, "enabled")]')]
                product['Attribute 1 name'] = attribute_label
                product['Attribute 1 value(s)'] = ', '.join(options)

                for option in options:
                    variant_sku = f"v_{uuid.uuid4().hex[:8]}"
                    variant = {'Type': 'variation', 'SKU': variant_sku, 'Parent': parent_sku,
                               'name': f'{product["name"]} - {option}',
                               'price': product['price'], 'images': product['images'],
                               'description': product['description'], 'categories': product['categories'],
                               'tags': product['tags'], "Attribute 1 name": product['Attribute 1 name'],
                               "Attribute 1 value(s)": option,
                               "Attribute 1 visible": "1",
                               "Attribute 1 global": "1",
                               "Attribute 2 visible": "1",
                               "Attribute 2 global": "1",
                               }
                    child_products.append(variant)
        else:
            product['Type'] = 'simple'
            product['SKU'] = simple_sku
            product['Parent'] = ""
            parent_products.append(product)

except Exception as e:
    logging.error('Unexpected error occurred.', exc_info=True)
finally:
    driver.quit()

"""# 保存数据"""

# 指定保存路径
folder_path = "/content/drive/My Drive/Python Code/wordpress/data"
if not os.path.exists(folder_path):
    os.makedirs(folder_path)

# 将获取到的数据写入CSV文件
filename = "belts_data_v1.csv"
filepath = os.path.join(folder_path, filename)

# 检查文件是否存在
if not os.path.isfile(filepath):
    # 如果文件不存在，写入并包含标题
    with open(filepath, 'w', newline='', encoding='utf-8') as f:
        header = ['name', 'SKU', 'Type', 'Parent', 'images', 'categories', 'tags', 'price', 'description',
                  'Attribute 1 name', 'Attribute 1 value(s)', 'Attribute 1 visible', 'Attribute 1 global',
                  'Attribute 2 name', 'Attribute 2 value(s)', 'Attribute 2 visible', 'Attribute 2 global']
        writer = csv.DictWriter(f, fieldnames=header)
        writer.writeheader()
        writer.writerows(parent_products + child_products)
else:
    # 如果文件存在，追加数据且不包含标题
    with open(filepath, 'a', newline='', encoding='utf-8') as f:
        header = ['name', 'SKU', 'Type', 'Parent', 'images', 'categories', 'tags', 'price', 'description',
                  'Attribute 1 name', 'Attribute 1 value(s)', 'Attribute 1 visible', 'Attribute 1 global',
                  'Attribute 2 name', 'Attribute 2 value(s)', 'Attribute 2 visible', 'Attribute 2 global']
        writer = csv.DictWriter(f, fieldnames=header)
        writer.writerows(parent_products + child_products)

# 指定保存路径
folder_path = "/content/drive/My Drive/Python Code/wordpress/data"
if not os.path.exists(folder_path):
    os.makedirs(folder_path)

# 对于每个类别进行处理
for category, start_url in categories_links.items():
    # 为每个类别生成一个特定的文件名
    filename = f"{category}_data.csv"
    filepath = os.path.join(folder_path, filename)

    # 检查该类别的文件是否存在
    if not os.path.isfile(filepath):
        # 如果文件不存在，新建文件并写入标题
        with open(filepath, 'w', newline='', encoding='utf-8') as f:
            header = ['name', 'images', 'categories', 'tags', 'price', 'description']
            writer = csv.DictWriter(f, fieldnames=header)
            writer.writeheader()
    # 由于可能有多个产品，你可以在此之前使用一个列表，
    # 例如 `current_category_products` 来收集当前类别下的所有产品字典，
    # 然后在这里一次性写入CSV
    with open(filepath, 'a', newline='', encoding='utf-8') as f:
        header = ['name', 'images', 'categories', 'tags', 'price', 'description']
        writer = csv.DictWriter(f, fieldnames=header)
        # 假设 `current_category_products` 包含了当前类别下所有产品的信息
        writer.writerows(current_category_products)

    # 清空当前类别产品列表，为下一个类别做准备
    current_category_products = []